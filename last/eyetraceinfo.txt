--@name EyeTraceInfo
--@author Klen_list uwu ~
--@client

local maxp = game.getMaxPlayers()

local function hsv2rgb(h, s, v)
    local C = v * s
    local m = v - C
    local r, g, b = m, m, m
    if h == h then
           local h_ = (h % 1.0) * 6
        local X = C * (1 - math.abs(h_ % 2 - 1))
        C, X = C + m, X + m
        if h_ < 1 then r, g, b = C, X, m
        elseif h_ < 2 then r, g, b = X, C, m
        elseif h_ < 3 then r, g, b = m, C, X
        elseif h_ < 4 then r, g, b = m, X, C
        elseif h_ < 5 then r, g, b = X, m, C
        else r, g, b = C, m, X end
    end
    return Color(r * 255, g * 255, b * 255)
end

hook.add("drawhud", "TraceInfo", function()
    local p = 0
    for i = 1, maxp do
        p = entity(i)
        if not isValid(p) then continue end
        local sw, sh = render.getResolution()
        render.pushViewMatrix({ type = "3D", x = 0, y = 0, w = sw, h = sh, origin = eyePos(), angles = eyeAngles(), aspect = sw / sh })
            render.setColor(hsv2rgb((timer.curtime() * .5) % 360, 1, 1))
            render.draw3DLine(p:getEyePos(), p:getEyeTrace().HitPos or (p:getAimVector() * 500))
        render.popViewMatrix()
    end
end)

--if player() == owner() then enableHud(nil, true) end

hook.add("starfallUsed", "UseEnableHUD", function(p, e)
    if p ~= player() then return end
    if e ~= chip() then return end
    local ha = render.isHUDActive()
    enableHud(p, not ha)
    print(("%s - %s %s hud."):format(p:getName(), ha and "disconnected from" or "connected to", chip():getChipName()))
end)

--[[   ___
      //!!\   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
     // || \  Klen_list@GLua:/fuck/yourself#
    // /--\ \ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    || )==( | 
    \\ \__/ / Arch Klenux (Starfall Container)
     \\ !! /    ~ x64-86
      \\||/       [X] 200X - KLA LLC (c)
]]